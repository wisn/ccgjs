{"version":3,"file":"ccgjs.esm.js","sources":["../src/generated.pegjs.ts","../src/ccg.reader.ts","../src/ccg.tree.ts","../src/ccg.dom.ts","../src/index.ts"],"sourcesContent":["// @ts-nocheck\n\n// Generated by PEG.js v. 0.10.0 (ts-pegjs plugin v. 0.2.7 )\n//\n// https://pegjs.org/   https://github.com/metadevpro/ts-pegjs\n\n\"use strict\";\n\nexport interface IFilePosition {\n  offset: number;\n  line: number;\n  column: number;\n}\n\nexport interface IFileRange {\n  start: IFilePosition;\n  end: IFilePosition;\n}\n\nexport interface ILiteralExpectation {\n  type: \"literal\";\n  text: string;\n  ignoreCase: boolean;\n}\n\nexport interface IClassParts extends Array<string | IClassParts> {}\n\nexport interface IClassExpectation {\n  type: \"class\";\n  parts: IClassParts;\n  inverted: boolean;\n  ignoreCase: boolean;\n}\n\nexport interface IAnyExpectation {\n  type: \"any\";\n}\n\nexport interface IEndExpectation {\n  type: \"end\";\n}\n\nexport interface IOtherExpectation {\n  type: \"other\";\n  description: string;\n}\n\nexport type Expectation = ILiteralExpectation | IClassExpectation | IAnyExpectation | IEndExpectation | IOtherExpectation;\n\nexport class SyntaxError extends Error {\n  public static buildMessage(expected: Expectation[], found: string | null) {\n    function hex(ch: string): string {\n      return ch.charCodeAt(0).toString(16).toUpperCase();\n    }\n\n    function literalEscape(s: string): string {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\"/g,  \"\\\\\\\"\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,            (ch) => \"\\\\x0\" + hex(ch) )\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, (ch) => \"\\\\x\"  + hex(ch) );\n    }\n\n    function classEscape(s: string): string {\n      return s\n        .replace(/\\\\/g, \"\\\\\\\\\")\n        .replace(/\\]/g, \"\\\\]\")\n        .replace(/\\^/g, \"\\\\^\")\n        .replace(/-/g,  \"\\\\-\")\n        .replace(/\\0/g, \"\\\\0\")\n        .replace(/\\t/g, \"\\\\t\")\n        .replace(/\\n/g, \"\\\\n\")\n        .replace(/\\r/g, \"\\\\r\")\n        .replace(/[\\x00-\\x0F]/g,            (ch) => \"\\\\x0\" + hex(ch) )\n        .replace(/[\\x10-\\x1F\\x7F-\\x9F]/g, (ch) => \"\\\\x\"  + hex(ch) );\n    }\n\n    function describeExpectation(expectation: Expectation) {\n      switch (expectation.type) {\n        case \"literal\":\n          return \"\\\"\" + literalEscape(expectation.text) + \"\\\"\";\n        case \"class\":\n          const escapedParts = expectation.parts.map((part) => {\n            return Array.isArray(part)\n              ? classEscape(part[0] as string) + \"-\" + classEscape(part[1] as string)\n              : classEscape(part);\n          });\n\n          return \"[\" + (expectation.inverted ? \"^\" : \"\") + escapedParts + \"]\";\n        case \"any\":\n          return \"any character\";\n        case \"end\":\n          return \"end of input\";\n        case \"other\":\n          return expectation.description;\n      }\n    }\n\n    function describeExpected(expected1: Expectation[]) {\n      const descriptions = expected1.map(describeExpectation);\n      let i: number;\n      let j: number;\n\n      descriptions.sort();\n\n      if (descriptions.length > 0) {\n        for (i = 1, j = 1; i < descriptions.length; i++) {\n          if (descriptions[i - 1] !== descriptions[i]) {\n            descriptions[j] = descriptions[i];\n            j++;\n          }\n        }\n        descriptions.length = j;\n      }\n\n      switch (descriptions.length) {\n        case 1:\n          return descriptions[0];\n\n        case 2:\n          return descriptions[0] + \" or \" + descriptions[1];\n\n        default:\n          return descriptions.slice(0, -1).join(\", \")\n            + \", or \"\n            + descriptions[descriptions.length - 1];\n      }\n    }\n\n    function describeFound(found1: string | null) {\n      return found1 ? \"\\\"\" + literalEscape(found1) + \"\\\"\" : \"end of input\";\n    }\n\n    return \"Expected \" + describeExpected(expected) + \" but \" + describeFound(found) + \" found.\";\n  }\n\n  public message: string;\n  public expected: Expectation[];\n  public found: string | null;\n  public location: IFileRange;\n  public name: string;\n\n  constructor(message: string, expected: Expectation[], found: string | null, location: IFileRange) {\n    super();\n    this.message = message;\n    this.expected = expected;\n    this.found = found;\n    this.location = location;\n    this.name = \"SyntaxError\";\n\n    if (typeof (Error as any).captureStackTrace === \"function\") {\n      (Error as any).captureStackTrace(this, SyntaxError);\n    }\n  }\n}\n\nexport interface ICached {\n  nextPos: number;\n  result: any;\n}\n\nfunction peg$parse(input: string, options?: IParseOptions) {\n  options = options !== undefined ? options : {};\n\n  const peg$FAILED: Readonly<{}> = {};\n\n  const peg$startRuleFunctions: {[id: string]: any} = { Start: peg$parseStart };\n  let peg$startRuleFunction: () => any = peg$parseStart;\n\n  const peg$c0 = \"(\";\n  const peg$c1 = peg$literalExpectation(\"(\", false);\n  const peg$c2 = \")\";\n  const peg$c3 = peg$literalExpectation(\")\", false);\n  const peg$c4 = function(node: any, left: any, right: any): any { return { node, left, right }; };\n  const peg$c5 = function(node: any, left: any, c: any): any { return { node, left, right: { node: c } }; };\n  const peg$c6 = function(node: any, c: any, right: any): any { return { node, left: { node: c }, right }; };\n  const peg$c7 = function(node: any, left: any): any { return { node, left }; };\n  const peg$c8 = function(node: any, c: any): any { return { node, ...c }; };\n  const peg$c9 = function(c1: any, c2: any): any { return { left: { node: c1 }, right: { node: c2 } }; };\n  const peg$c10 = function(c: any): any { return { left: { node: c } }; };\n  const peg$c11 = \"<\";\n  const peg$c12 = peg$literalExpectation(\"<\", false);\n  const peg$c13 = \"T\";\n  const peg$c14 = peg$literalExpectation(\"T\", false);\n  const peg$c15 = \">\";\n  const peg$c16 = peg$literalExpectation(\">\", false);\n  const peg$c17 = function(ccgCat: any, head: any, dtrs: any): any { return { type: \"T\", ccgCat, head, dtrs }; };\n  const peg$c18 = \"0\";\n  const peg$c19 = peg$literalExpectation(\"0\", false);\n  const peg$c20 = \"1\";\n  const peg$c21 = peg$literalExpectation(\"1\", false);\n  const peg$c22 = function(): any { return int(text()); };\n  const peg$c23 = \"2\";\n  const peg$c24 = peg$literalExpectation(\"2\", false);\n  const peg$c25 = \"L\";\n  const peg$c26 = peg$literalExpectation(\"L\", false);\n  const peg$c27 = function(ccgCat: any, modPOSTag: any, origPOSTag: any, word: any, predArgCat: any): any {\n        return {\n          type: \"L\",\n          ccgCat,\n          modPOSTag,\n          origPOSTag,\n          word,\n          predArgCat,\n        };\n      };\n  const peg$c28 = \"/\";\n  const peg$c29 = peg$literalExpectation(\"/\", false);\n  const peg$c30 = \"\\\\\";\n  const peg$c31 = peg$literalExpectation(\"\\\\\", false);\n  const peg$c32 = function(): any { return text(); };\n  const peg$c33 = /^[A-Za-z]/;\n  const peg$c34 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"]], false, false);\n  const peg$c35 = \"[\";\n  const peg$c36 = peg$literalExpectation(\"[\", false);\n  const peg$c37 = /^[A-Za-z,]/;\n  const peg$c38 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], \",\"], false, false);\n  const peg$c39 = \"]\";\n  const peg$c40 = peg$literalExpectation(\"]\", false);\n  const peg$c41 = /^[A-Z]/;\n  const peg$c42 = peg$classExpectation([[\"A\", \"Z\"]], false, false);\n  const peg$c43 = /^[A-Za-z0-9]/;\n  const peg$c44 = peg$classExpectation([[\"A\", \"Z\"], [\"a\", \"z\"], [\"0\", \"9\"]], false, false);\n  const peg$c45 = peg$otherExpectation(\"whitespace\");\n  const peg$c46 = /^[ \\t\\n\\r]/;\n  const peg$c47 = peg$classExpectation([\" \", \"\\t\", \"\\n\", \"\\r\"], false, false);\n  const peg$c48 = peg$otherExpectation(\"whitespaces\");\n\n  let peg$currPos = 0;\n  let peg$savedPos = 0;\n  const peg$posDetailsCache = [{ line: 1, column: 1 }];\n  let peg$maxFailPos = 0;\n  let peg$maxFailExpected: Expectation[] = [];\n  let peg$silentFails = 0;\n\n  const peg$resultsCache: {[id: number]: ICached} = {};\n\n  let peg$result;\n\n  if (options.startRule !== undefined) {\n    if (!(options.startRule in peg$startRuleFunctions)) {\n      throw new Error(\"Can't start parsing from rule \\\"\" + options.startRule + \"\\\".\");\n    }\n\n    peg$startRuleFunction = peg$startRuleFunctions[options.startRule];\n  }\n\n  function text(): string {\n    return input.substring(peg$savedPos, peg$currPos);\n  }\n\n  function location(): IFileRange {\n    return peg$computeLocation(peg$savedPos, peg$currPos);\n  }\n\n  function expected(description: string, location1?: IFileRange) {\n    location1 = location1 !== undefined\n      ? location1\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildStructuredError(\n      [peg$otherExpectation(description)],\n      input.substring(peg$savedPos, peg$currPos),\n      location1\n    );\n  }\n\n  function error(message: string, location1?: IFileRange) {\n    location1 = location1 !== undefined\n      ? location1\n      : peg$computeLocation(peg$savedPos, peg$currPos);\n\n    throw peg$buildSimpleError(message, location1);\n  }\n\n  function peg$literalExpectation(text1: string, ignoreCase: boolean): ILiteralExpectation {\n    return { type: \"literal\", text: text1, ignoreCase: ignoreCase };\n  }\n\n  function peg$classExpectation(parts: IClassParts, inverted: boolean, ignoreCase: boolean): IClassExpectation {\n    return { type: \"class\", parts: parts, inverted: inverted, ignoreCase: ignoreCase };\n  }\n\n  function peg$anyExpectation(): IAnyExpectation {\n    return { type: \"any\" };\n  }\n\n  function peg$endExpectation(): IEndExpectation {\n    return { type: \"end\" };\n  }\n\n  function peg$otherExpectation(description: string): IOtherExpectation {\n    return { type: \"other\", description: description };\n  }\n\n  function peg$computePosDetails(pos: number) {\n    let details = peg$posDetailsCache[pos];\n    let p;\n\n    if (details) {\n      return details;\n    } else {\n      p = pos - 1;\n      while (!peg$posDetailsCache[p]) {\n        p--;\n      }\n\n      details = peg$posDetailsCache[p];\n      details = {\n        line: details.line,\n        column: details.column\n      };\n\n      while (p < pos) {\n        if (input.charCodeAt(p) === 10) {\n          details.line++;\n          details.column = 1;\n        } else {\n          details.column++;\n        }\n\n        p++;\n      }\n\n      peg$posDetailsCache[pos] = details;\n\n      return details;\n    }\n  }\n\n  function peg$computeLocation(startPos: number, endPos: number): IFileRange {\n    const startPosDetails = peg$computePosDetails(startPos);\n    const endPosDetails = peg$computePosDetails(endPos);\n\n    return {\n      start: {\n        offset: startPos,\n        line: startPosDetails.line,\n        column: startPosDetails.column\n      },\n      end: {\n        offset: endPos,\n        line: endPosDetails.line,\n        column: endPosDetails.column\n      }\n    };\n  }\n\n  function peg$fail(expected1: Expectation) {\n    if (peg$currPos < peg$maxFailPos) { return; }\n\n    if (peg$currPos > peg$maxFailPos) {\n      peg$maxFailPos = peg$currPos;\n      peg$maxFailExpected = [];\n    }\n\n    peg$maxFailExpected.push(expected1);\n  }\n\n  function peg$buildSimpleError(message: string, location1: IFileRange) {\n    return new SyntaxError(message, [], \"\", location1);\n  }\n\n  function peg$buildStructuredError(expected1: Expectation[], found: string | null, location1: IFileRange) {\n    return new SyntaxError(\n      SyntaxError.buildMessage(expected1, found),\n      expected1,\n      found,\n      location1\n    );\n  }\n\n  function peg$parseStart(): any {\n    let s0;\n\n    const key = peg$currPos * 15 + 0;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$parseTree();\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseTree(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10;\n\n    const key = peg$currPos * 15 + 1;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c0;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNodeT();\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseTree();\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parseTree();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 41) {\n                s6 = peg$c2;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c3); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse__();\n                if (s7 !== peg$FAILED) {\n                  peg$savedPos = s0;\n                  s1 = peg$c4(s3, s4, s5);\n                  s0 = s1;\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c0;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseNodeT();\n          if (s3 !== peg$FAILED) {\n            s4 = peg$parseTree();\n            if (s4 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 40) {\n                s5 = peg$c0;\n                peg$currPos++;\n              } else {\n                s5 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c1); }\n              }\n              if (s5 !== peg$FAILED) {\n                s6 = peg$parseNodeL();\n                if (s6 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s7 = peg$c2;\n                    peg$currPos++;\n                  } else {\n                    s7 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c3); }\n                  }\n                  if (s7 !== peg$FAILED) {\n                    s8 = peg$parse__();\n                    if (s8 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s9 = peg$c2;\n                        peg$currPos++;\n                      } else {\n                        s9 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n                      }\n                      if (s9 !== peg$FAILED) {\n                        s10 = peg$parse__();\n                        if (s10 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c5(s3, s4, s6);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n      if (s0 === peg$FAILED) {\n        s0 = peg$currPos;\n        s1 = peg$parse__();\n        if (s1 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 40) {\n            s2 = peg$c0;\n            peg$currPos++;\n          } else {\n            s2 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c1); }\n          }\n          if (s2 !== peg$FAILED) {\n            s3 = peg$parseNodeT();\n            if (s3 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 40) {\n                s4 = peg$c0;\n                peg$currPos++;\n              } else {\n                s4 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c1); }\n              }\n              if (s4 !== peg$FAILED) {\n                s5 = peg$parseNodeL();\n                if (s5 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s6 = peg$c2;\n                    peg$currPos++;\n                  } else {\n                    s6 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c3); }\n                  }\n                  if (s6 !== peg$FAILED) {\n                    s7 = peg$parseTree();\n                    if (s7 !== peg$FAILED) {\n                      if (input.charCodeAt(peg$currPos) === 41) {\n                        s8 = peg$c2;\n                        peg$currPos++;\n                      } else {\n                        s8 = peg$FAILED;\n                        if (peg$silentFails === 0) { peg$fail(peg$c3); }\n                      }\n                      if (s8 !== peg$FAILED) {\n                        s9 = peg$parse__();\n                        if (s9 !== peg$FAILED) {\n                          peg$savedPos = s0;\n                          s1 = peg$c6(s3, s5, s7);\n                          s0 = s1;\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n        if (s0 === peg$FAILED) {\n          s0 = peg$currPos;\n          s1 = peg$parse__();\n          if (s1 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 40) {\n              s2 = peg$c0;\n              peg$currPos++;\n            } else {\n              s2 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c1); }\n            }\n            if (s2 !== peg$FAILED) {\n              s3 = peg$parseNodeT();\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parseTree();\n                if (s4 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s5 = peg$c2;\n                    peg$currPos++;\n                  } else {\n                    s5 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c3); }\n                  }\n                  if (s5 !== peg$FAILED) {\n                    s6 = peg$parse__();\n                    if (s6 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c7(s3, s4);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n          if (s0 === peg$FAILED) {\n            s0 = peg$currPos;\n            s1 = peg$parse__();\n            if (s1 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 40) {\n                s2 = peg$c0;\n                peg$currPos++;\n              } else {\n                s2 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c1); }\n              }\n              if (s2 !== peg$FAILED) {\n                s3 = peg$parseNodeT();\n                if (s3 !== peg$FAILED) {\n                  s4 = peg$parseNode();\n                  if (s4 !== peg$FAILED) {\n                    if (input.charCodeAt(peg$currPos) === 41) {\n                      s5 = peg$c2;\n                      peg$currPos++;\n                    } else {\n                      s5 = peg$FAILED;\n                      if (peg$silentFails === 0) { peg$fail(peg$c3); }\n                    }\n                    if (s5 !== peg$FAILED) {\n                      s6 = peg$parse__();\n                      if (s6 !== peg$FAILED) {\n                        peg$savedPos = s0;\n                        s1 = peg$c8(s3, s4);\n                        s0 = s1;\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          }\n        }\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseNode(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9;\n\n    const key = peg$currPos * 15 + 2;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 40) {\n        s2 = peg$c0;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c1); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parseNodeL();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 41) {\n            s4 = peg$c2;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c3); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse__();\n            if (s5 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 40) {\n                s6 = peg$c0;\n                peg$currPos++;\n              } else {\n                s6 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c1); }\n              }\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parseNodeL();\n                if (s7 !== peg$FAILED) {\n                  if (input.charCodeAt(peg$currPos) === 41) {\n                    s8 = peg$c2;\n                    peg$currPos++;\n                  } else {\n                    s8 = peg$FAILED;\n                    if (peg$silentFails === 0) { peg$fail(peg$c3); }\n                  }\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse__();\n                    if (s9 !== peg$FAILED) {\n                      peg$savedPos = s0;\n                      s1 = peg$c9(s3, s7);\n                      s0 = s1;\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parse__();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c0;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseNodeL();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c2;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c3); }\n            }\n            if (s4 !== peg$FAILED) {\n              s5 = peg$parse__();\n              if (s5 !== peg$FAILED) {\n                peg$savedPos = s0;\n                s1 = peg$c10(s3);\n                s0 = s1;\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseNodeT(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13;\n\n    const key = peg$currPos * 15 + 3;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 60) {\n        s2 = peg$c11;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 84) {\n            s4 = peg$c13;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c14); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseCCGCat();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parseHead();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse_();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parseDtrs();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse__();\n                        if (s11 !== peg$FAILED) {\n                          if (input.charCodeAt(peg$currPos) === 62) {\n                            s12 = peg$c15;\n                            peg$currPos++;\n                          } else {\n                            s12 = peg$FAILED;\n                            if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                          }\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse__();\n                            if (s13 !== peg$FAILED) {\n                              peg$savedPos = s0;\n                              s1 = peg$c17(s6, s8, s10);\n                              s0 = s1;\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseHead(): any {\n    let s0, s1;\n\n    const key = peg$currPos * 15 + 4;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s1 = peg$c18;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 49) {\n        s1 = peg$c20;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c22();\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseDtrs(): any {\n    let s0, s1;\n\n    const key = peg$currPos * 15 + 5;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 48) {\n      s1 = peg$c18;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c19); }\n    }\n    if (s1 === peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 49) {\n        s1 = peg$c20;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c21); }\n      }\n      if (s1 === peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 50) {\n          s1 = peg$c23;\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c24); }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c22();\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseNodeL(): any {\n    let s0, s1, s2, s3, s4, s5, s6, s7, s8, s9, s10, s11, s12, s13, s14, s15, s16, s17;\n\n    const key = peg$currPos * 15 + 6;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parse__();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 60) {\n        s2 = peg$c11;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c12); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = peg$parse__();\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 76) {\n            s4 = peg$c25;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c26); }\n          }\n          if (s4 !== peg$FAILED) {\n            s5 = peg$parse_();\n            if (s5 !== peg$FAILED) {\n              s6 = peg$parseCCGCat();\n              if (s6 !== peg$FAILED) {\n                s7 = peg$parse_();\n                if (s7 !== peg$FAILED) {\n                  s8 = peg$parsePOSTag();\n                  if (s8 !== peg$FAILED) {\n                    s9 = peg$parse_();\n                    if (s9 !== peg$FAILED) {\n                      s10 = peg$parsePOSTag();\n                      if (s10 !== peg$FAILED) {\n                        s11 = peg$parse_();\n                        if (s11 !== peg$FAILED) {\n                          s12 = peg$parseWord();\n                          if (s12 !== peg$FAILED) {\n                            s13 = peg$parse_();\n                            if (s13 !== peg$FAILED) {\n                              s14 = peg$parseCCGCat();\n                              if (s14 !== peg$FAILED) {\n                                s15 = peg$parse__();\n                                if (s15 !== peg$FAILED) {\n                                  if (input.charCodeAt(peg$currPos) === 62) {\n                                    s16 = peg$c15;\n                                    peg$currPos++;\n                                  } else {\n                                    s16 = peg$FAILED;\n                                    if (peg$silentFails === 0) { peg$fail(peg$c16); }\n                                  }\n                                  if (s16 !== peg$FAILED) {\n                                    s17 = peg$parse__();\n                                    if (s17 !== peg$FAILED) {\n                                      peg$savedPos = s0;\n                                      s1 = peg$c27(s6, s8, s10, s12, s14);\n                                      s0 = s1;\n                                    } else {\n                                      peg$currPos = s0;\n                                      s0 = peg$FAILED;\n                                    }\n                                  } else {\n                                    peg$currPos = s0;\n                                    s0 = peg$FAILED;\n                                  }\n                                } else {\n                                  peg$currPos = s0;\n                                  s0 = peg$FAILED;\n                                }\n                              } else {\n                                peg$currPos = s0;\n                                s0 = peg$FAILED;\n                              }\n                            } else {\n                              peg$currPos = s0;\n                              s0 = peg$FAILED;\n                            }\n                          } else {\n                            peg$currPos = s0;\n                            s0 = peg$FAILED;\n                          }\n                        } else {\n                          peg$currPos = s0;\n                          s0 = peg$FAILED;\n                        }\n                      } else {\n                        peg$currPos = s0;\n                        s0 = peg$FAILED;\n                      }\n                    } else {\n                      peg$currPos = s0;\n                      s0 = peg$FAILED;\n                    }\n                  } else {\n                    peg$currPos = s0;\n                    s0 = peg$FAILED;\n                  }\n                } else {\n                  peg$currPos = s0;\n                  s0 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s0;\n                s0 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s0;\n              s0 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseCCGCat(): any {\n    let s0, s1, s2, s3, s4, s5;\n\n    const key = peg$currPos * 15 + 7;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 40) {\n      s2 = peg$c0;\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c1); }\n    }\n    if (s2 !== peg$FAILED) {\n      s3 = peg$parseCCGCat();\n      if (s3 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 41) {\n          s4 = peg$c2;\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c3); }\n        }\n        if (s4 !== peg$FAILED) {\n          s5 = peg$parseRightCat();\n          if (s5 !== peg$FAILED) {\n            s2 = [s2, s3, s4, s5];\n            s1 = s2;\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s1;\n      s1 = peg$FAILED;\n    }\n    if (s1 === peg$FAILED) {\n      s1 = peg$currPos;\n      s2 = peg$parseLeftCat();\n      if (s2 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s3 = peg$c0;\n          peg$currPos++;\n        } else {\n          s3 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1); }\n        }\n        if (s3 !== peg$FAILED) {\n          s4 = peg$parseCCGCat();\n          if (s4 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s5 = peg$c2;\n              peg$currPos++;\n            } else {\n              s5 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c3); }\n            }\n            if (s5 !== peg$FAILED) {\n              s2 = [s2, s3, s4, s5];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s1;\n        s1 = peg$FAILED;\n      }\n      if (s1 === peg$FAILED) {\n        s1 = peg$currPos;\n        if (input.charCodeAt(peg$currPos) === 40) {\n          s2 = peg$c0;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c1); }\n        }\n        if (s2 !== peg$FAILED) {\n          s3 = peg$parseCCGCat();\n          if (s3 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 41) {\n              s4 = peg$c2;\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c3); }\n            }\n            if (s4 !== peg$FAILED) {\n              s2 = [s2, s3, s4];\n              s1 = s2;\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s1;\n          s1 = peg$FAILED;\n        }\n        if (s1 === peg$FAILED) {\n          s1 = peg$currPos;\n          s2 = peg$parseSingleCat();\n          if (s2 !== peg$FAILED) {\n            if (input.charCodeAt(peg$currPos) === 47) {\n              s3 = peg$c28;\n              peg$currPos++;\n            } else {\n              s3 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c29); }\n            }\n            if (s3 !== peg$FAILED) {\n              s4 = peg$parseSingleCat();\n              if (s4 !== peg$FAILED) {\n                s2 = [s2, s3, s4];\n                s1 = s2;\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n          } else {\n            peg$currPos = s1;\n            s1 = peg$FAILED;\n          }\n          if (s1 === peg$FAILED) {\n            s1 = peg$currPos;\n            s2 = peg$parseSingleCat();\n            if (s2 !== peg$FAILED) {\n              if (input.charCodeAt(peg$currPos) === 92) {\n                s3 = peg$c30;\n                peg$currPos++;\n              } else {\n                s3 = peg$FAILED;\n                if (peg$silentFails === 0) { peg$fail(peg$c31); }\n              }\n              if (s3 !== peg$FAILED) {\n                s4 = peg$parseSingleCat();\n                if (s4 !== peg$FAILED) {\n                  s2 = [s2, s3, s4];\n                  s1 = s2;\n                } else {\n                  peg$currPos = s1;\n                  s1 = peg$FAILED;\n                }\n              } else {\n                peg$currPos = s1;\n                s1 = peg$FAILED;\n              }\n            } else {\n              peg$currPos = s1;\n              s1 = peg$FAILED;\n            }\n            if (s1 === peg$FAILED) {\n              s1 = peg$parseSingleCat();\n            }\n          }\n        }\n      }\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c32();\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseLeftCat(): any {\n    let s0, s1, s2;\n\n    const key = peg$currPos * 15 + 8;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = peg$parseSingleCat();\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 47) {\n        s2 = peg$c28;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c29); }\n      }\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      s1 = peg$parseSingleCat();\n      if (s1 !== peg$FAILED) {\n        if (input.charCodeAt(peg$currPos) === 92) {\n          s2 = peg$c30;\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c31); }\n        }\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseRightCat(): any {\n    let s0, s1, s2;\n\n    const key = peg$currPos * 15 + 9;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    if (input.charCodeAt(peg$currPos) === 47) {\n      s1 = peg$c28;\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c29); }\n    }\n    if (s1 !== peg$FAILED) {\n      s2 = peg$parseSingleCat();\n      if (s2 !== peg$FAILED) {\n        s1 = [s1, s2];\n        s0 = s1;\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = peg$currPos;\n      if (input.charCodeAt(peg$currPos) === 92) {\n        s1 = peg$c30;\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c31); }\n      }\n      if (s1 !== peg$FAILED) {\n        s2 = peg$parseSingleCat();\n        if (s2 !== peg$FAILED) {\n          s1 = [s1, s2];\n          s0 = s1;\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseSingleCat(): any {\n    let s0, s1, s2, s3, s4;\n\n    const key = peg$currPos * 15 + 10;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c33.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c34); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c33.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c34); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      if (input.charCodeAt(peg$currPos) === 91) {\n        s2 = peg$c35;\n        peg$currPos++;\n      } else {\n        s2 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c36); }\n      }\n      if (s2 !== peg$FAILED) {\n        s3 = [];\n        if (peg$c37.test(input.charAt(peg$currPos))) {\n          s4 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s4 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c38); }\n        }\n        if (s4 !== peg$FAILED) {\n          while (s4 !== peg$FAILED) {\n            s3.push(s4);\n            if (peg$c37.test(input.charAt(peg$currPos))) {\n              s4 = input.charAt(peg$currPos);\n              peg$currPos++;\n            } else {\n              s4 = peg$FAILED;\n              if (peg$silentFails === 0) { peg$fail(peg$c38); }\n            }\n          }\n        } else {\n          s3 = peg$FAILED;\n        }\n        if (s3 !== peg$FAILED) {\n          if (input.charCodeAt(peg$currPos) === 93) {\n            s4 = peg$c39;\n            peg$currPos++;\n          } else {\n            s4 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c40); }\n          }\n          if (s4 !== peg$FAILED) {\n            s1 = [s1, s2, s3, s4];\n            s0 = s1;\n          } else {\n            peg$currPos = s0;\n            s0 = peg$FAILED;\n          }\n        } else {\n          peg$currPos = s0;\n          s0 = peg$FAILED;\n        }\n      } else {\n        peg$currPos = s0;\n        s0 = peg$FAILED;\n      }\n    } else {\n      peg$currPos = s0;\n      s0 = peg$FAILED;\n    }\n    if (s0 === peg$FAILED) {\n      s0 = [];\n      if (peg$c33.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c34); }\n      }\n      if (s1 !== peg$FAILED) {\n        while (s1 !== peg$FAILED) {\n          s0.push(s1);\n          if (peg$c33.test(input.charAt(peg$currPos))) {\n            s1 = input.charAt(peg$currPos);\n            peg$currPos++;\n          } else {\n            s1 = peg$FAILED;\n            if (peg$silentFails === 0) { peg$fail(peg$c34); }\n          }\n        }\n      } else {\n        s0 = peg$FAILED;\n      }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parsePOSTag(): any {\n    let s0, s1, s2;\n\n    const key = peg$currPos * 15 + 11;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c41.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c42); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c41.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c42); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c32();\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parseWord(): any {\n    let s0, s1, s2;\n\n    const key = peg$currPos * 15 + 12;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    s0 = peg$currPos;\n    s1 = [];\n    if (peg$c43.test(input.charAt(peg$currPos))) {\n      s2 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s2 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c44); }\n    }\n    if (s2 !== peg$FAILED) {\n      while (s2 !== peg$FAILED) {\n        s1.push(s2);\n        if (peg$c43.test(input.charAt(peg$currPos))) {\n          s2 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s2 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c44); }\n        }\n      }\n    } else {\n      s1 = peg$FAILED;\n    }\n    if (s1 !== peg$FAILED) {\n      peg$savedPos = s0;\n      s1 = peg$c32();\n    }\n    s0 = s1;\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse_(): any {\n    let s0, s1;\n\n    const key = peg$currPos * 15 + 13;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$c46.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c47); }\n    }\n    if (s1 !== peg$FAILED) {\n      while (s1 !== peg$FAILED) {\n        s0.push(s1);\n        if (peg$c46.test(input.charAt(peg$currPos))) {\n          s1 = input.charAt(peg$currPos);\n          peg$currPos++;\n        } else {\n          s1 = peg$FAILED;\n          if (peg$silentFails === 0) { peg$fail(peg$c47); }\n        }\n      }\n    } else {\n      s0 = peg$FAILED;\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c45); }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n  function peg$parse__(): any {\n    let s0, s1;\n\n    const key = peg$currPos * 15 + 14;\n    const cached: ICached = peg$resultsCache[key];\n\n    if (cached) {\n      peg$currPos = cached.nextPos;\n\n      return cached.result;\n    }\n\n    peg$silentFails++;\n    s0 = [];\n    if (peg$c46.test(input.charAt(peg$currPos))) {\n      s1 = input.charAt(peg$currPos);\n      peg$currPos++;\n    } else {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c47); }\n    }\n    while (s1 !== peg$FAILED) {\n      s0.push(s1);\n      if (peg$c46.test(input.charAt(peg$currPos))) {\n        s1 = input.charAt(peg$currPos);\n        peg$currPos++;\n      } else {\n        s1 = peg$FAILED;\n        if (peg$silentFails === 0) { peg$fail(peg$c47); }\n      }\n    }\n    peg$silentFails--;\n    if (s0 === peg$FAILED) {\n      s1 = peg$FAILED;\n      if (peg$silentFails === 0) { peg$fail(peg$c48); }\n    }\n\n    peg$resultsCache[key] = { nextPos: peg$currPos, result: s0 };\n\n    return s0;\n  }\n\n\n    function int(x) {\n      return parseInt(x, 10);\n    }\n\n\n  peg$result = peg$startRuleFunction();\n\n  if (peg$result !== peg$FAILED && peg$currPos === input.length) {\n    return peg$result;\n  } else {\n    if (peg$result !== peg$FAILED && peg$currPos < input.length) {\n      peg$fail(peg$endExpectation());\n    }\n\n    throw peg$buildStructuredError(\n      peg$maxFailExpected,\n      peg$maxFailPos < input.length ? input.charAt(peg$maxFailPos) : null,\n      peg$maxFailPos < input.length\n        ? peg$computeLocation(peg$maxFailPos, peg$maxFailPos + 1)\n        : peg$computeLocation(peg$maxFailPos, peg$maxFailPos)\n    );\n  }\n}\n\nexport interface IParseOptions {\n  filename?: string;\n  startRule?: string;\n  tracer?: any;\n  [key: string]: any;\n}\nexport type ParseFunction = (input: string, options?: IParseOptions) => any;\nexport const parse: ParseFunction = peg$parse;\n\n","import * as PEGjs from './generated.pegjs';\n\nexport enum DependencyHead {\n  Left = 0,\n  Right = 1,\n}\n\nexport type MachineReadableCCGNodeT = {\n  type?: string;\n  ccgCat: string;\n  head: DependencyHead;\n  dtrs: 0 | 1 | 2;\n};\n\nexport type MachineReadableCCGNodeL = {\n  type?: string;\n  ccgCat: string;\n  modPOSTag: string;\n  origPOSTag: string;\n  word: string;\n  predArgCat: string;\n};\n\nexport type MachineReadableCCG = {\n  node: MachineReadableCCGNodeT | MachineReadableCCGNodeL;\n  left?: MachineReadableCCG;\n  right?: MachineReadableCCG;\n};\n\nexport default class Reader {\n  public original: string;\n  public isSucceed: boolean = false;\n  public result?: MachineReadableCCG;\n\n  public constructor(str: string = '') {\n    this.original = str;\n  }\n\n  public read(): MachineReadableCCG | boolean {\n    let obj;\n    try {\n      obj = PEGjs.parse(this.original);\n    } catch {\n      return false;\n    }\n\n    this.result = obj;\n    this.isSucceed = true;\n\n    return obj;\n  }\n}\n","import Reader, {\n  MachineReadableCCGNodeT,\n  MachineReadableCCGNodeL,\n  MachineReadableCCG,\n} from './ccg.reader';\n\nexport type NodeT = MachineReadableCCGNodeT & { nIndex?: number };\n\nexport type NodeL = MachineReadableCCGNodeL & {\n  nIndex?: number;\n  wIndex?: number;\n};\n\nexport type Node = {\n  value: NodeT | NodeL;\n  left?: Node;\n  right?: Node;\n};\n\nexport type Derivation = {\n  from: number;\n  to: number;\n  ccgCat: string;\n  opr?: string;\n};\n\nexport type Metadata = {\n  isParsed: boolean;\n  sentence: string;\n  words: Array<string>;\n  ccgCats: Array<string>;\n  derivations?: Array<Array<Derivation>>;\n  height: number;\n  nodes: Array<Node>;\n};\n\nexport type IndexedWordMapper = { [key: number]: Node };\n\nexport type ToStringOptions = { pretty?: boolean };\n\nexport default class Tree {\n  public root?: Node;\n  public metadata?: Metadata;\n  public mappedIndexedWords?: IndexedWordMapper;\n  private stringBuilder?: string;\n\n  constructor(str: string = '') {\n    if (str.length > 0) {\n      this.metadata = {\n        isParsed: false,\n        sentence: '',\n        words: [],\n        ccgCats: [],\n        height: 0,\n        nodes: [],\n      };\n      this.constructTree(str);\n    }\n  }\n\n  public traverse(fn: Function): any {\n    return fn(this.root);\n  }\n\n  public toString(opts?: ToStringOptions): string {\n    if (this.root) {\n      this.stringBuilder = '';\n      this.toStringUtil(this.root, 0, opts);\n\n      return this.stringBuilder.substring(1);\n    }\n\n    return '';\n  }\n\n  public buildDerivations(): Array<Array<Derivation>> {\n    if (!this.root) {\n      return [];\n    }\n\n    this.metadata!.derivations = [];\n    for (let i = 0; i < this.metadata!.height!; i++) {\n      this.metadata!.derivations.push([]);\n    }\n\n    this.buildDerivUtil(this.root!);\n\n    return this.metadata!.derivations;\n  }\n\n  private constructTree(str: string): void {\n    const reader = new Reader(str);\n    if (reader.read()) {\n      const result: MachineReadableCCG = reader.result as MachineReadableCCG;\n\n      this.buildTree(result);\n      this.metadata!.isParsed = true;\n    }\n  }\n\n  private buildTree(obj: MachineReadableCCG): void {\n    this.buildTreeUtil(obj, 1);\n  }\n\n  private buildTreeUtil(\n    obj: MachineReadableCCG,\n    level: number,\n    parent?: Node,\n    dir?: string\n  ): void {\n    const node: Node = { value: obj.node };\n    if (this.root === undefined) {\n      this.mappedIndexedWords = {};\n      this.root = node;\n    }\n\n    const nIndex = this.metadata?.nodes.length;\n    node.value.nIndex = nIndex;\n    this.metadata?.nodes.push(node);\n\n    if (this.isNodeL(node)) {\n      const nodeL: NodeL = node.value as NodeL;\n      const wIndex = this.metadata!.words.length;\n\n      nodeL.wIndex = wIndex;\n      this.metadata!.words.push(nodeL.word);\n      this.metadata!.ccgCats.push(nodeL.ccgCat);\n      this.mappedIndexedWords![wIndex] = node;\n\n      if (this.metadata?.sentence === '') {\n        this.metadata!.sentence = nodeL.word;\n      } else {\n        this.metadata!.sentence += ` ${nodeL.word}`;\n      }\n    }\n\n    this.metadata!.height = Math.max(this.metadata?.height!, level);\n\n    if (dir === 'left') {\n      parent!.left = node;\n    }\n\n    if (dir === 'right') {\n      parent!.right = node;\n    }\n\n    obj.left && this.buildTreeUtil(obj.left, level + 1, node, 'left');\n    obj.right && this.buildTreeUtil(obj.right, level + 1, node, 'right');\n  }\n\n  private toStringUtil(\n    node: Node,\n    level: number,\n    opts?: ToStringOptions\n  ): void {\n    if (opts?.pretty) {\n      const indents = 2 * level;\n      this.stringBuilder += '\\n' + ' '.repeat(indents) + '(';\n    } else {\n      this.stringBuilder += ' (';\n    }\n\n    if (this.isNodeT(node)) {\n      const n: NodeT = node.value as NodeT;\n      this.stringBuilder += [\n        '<T',\n        `${n.ccgCat}`,\n        `${n.head}`,\n        `${n.dtrs}>`,\n      ].join(' ');\n    } else if (this.isNodeL(node)) {\n      const n: NodeL = node.value as NodeL;\n      this.stringBuilder += [\n        '<L',\n        `${n.ccgCat}`,\n        `${n.modPOSTag}`,\n        `${n.origPOSTag}`,\n        `${n.word}`,\n        `${n.predArgCat}>`,\n      ].join(' ');\n    } else {\n      this.stringBuilder += '<ill-formed CCG Node>';\n    }\n\n    node.left && this.toStringUtil(node.left, level + 1, opts);\n    node.right && this.toStringUtil(node.right, level + 1, opts);\n\n    this.stringBuilder += ')';\n  }\n\n  private isNodeT(node: Node): boolean {\n    return (node.value as NodeT).head !== undefined;\n  }\n\n  private isNodeL(node: Node): boolean {\n    return (node.value as NodeL).word !== undefined;\n  }\n\n  private buildDerivUtil(node: Node, dir?: string): Array<number> {\n    if (this.isNodeL(node)) {\n      const nodeL: NodeL = node.value as NodeL;\n      const index = nodeL.wIndex!;\n\n      const derivation: Derivation = {\n        from: index,\n        to: index,\n        ccgCat: nodeL.ccgCat,\n      };\n      this.metadata!.derivations![0].push(derivation);\n\n      if (dir === 'left') {\n        return [index, -1, 1];\n      }\n\n      return [-1, index, 1];\n    }\n\n    const derivLeft = this.buildDerivUtil(node.left!, 'left');\n    let derivRight: Array<null> | Array<number> = [null, null, null];\n\n    if (node.right) {\n      derivRight = this.buildDerivUtil(node.right!, 'right');\n    }\n\n    const derivation: Derivation = {\n      from: derivLeft[0],\n      to: derivRight[1] ?? derivLeft[0],\n      ccgCat: node.value.ccgCat,\n      opr: (node.value as NodeT).head !== 0 ? '<' : '>',\n    };\n    const bottom = Math.max(derivLeft[2], derivRight[2] ?? -1);\n\n    this.metadata!.derivations![bottom].push(derivation);\n\n    return [derivation.from, derivation.to, bottom + 1];\n  }\n}\n","import Tree from './ccg.tree';\n\nexport default class DOM {\n  public tree?: Tree;\n  private domBuilder?: HTMLElement;\n\n  public constructor(tree: string | Tree) {\n    if (typeof tree === 'string') {\n      if (tree.length > 0) {\n        this.tree = new Tree(tree);\n      }\n    } else {\n      this.tree = tree;\n    }\n\n    this.tree?.buildDerivations();\n  }\n\n  public create(fn?: Function): any {\n    if (fn) {\n      return fn(this.tree);\n    }\n\n    return this.createTable();\n  }\n\n  public createTable(): HTMLElement {\n    const table = document.createElement('table');\n    table.className = 'ccgjs';\n    this.domBuilder = table;\n\n    let lastTo: number;\n    let hrTr: HTMLTableRowElement;\n    const numOfWords = this.tree!.metadata!.words.length;\n    const wordTr = document.createElement('tr');\n\n    this.tree?.metadata?.words.forEach(word => {\n      const wordTd = document.createElement('td');\n      const text = document.createTextNode(word);\n      wordTd.appendChild(text);\n      wordTr.appendChild(wordTd);\n\n      const oprTd = document.createElement('td');\n      oprTd.className = 'ccgjs-operation';\n      wordTr.appendChild(oprTd);\n    });\n\n    wordTr.className = 'ccgjs-words';\n    this.domBuilder.appendChild(wordTr);\n\n    this.tree?.metadata?.derivations?.forEach(row => {\n      const derivTr = document.createElement('tr');\n      derivTr.className = 'ccgjs-derivation';\n\n      lastTo = 0;\n      hrTr = document.createElement('tr');\n      hrTr.className = 'ccgjs-ruler';\n\n      row.forEach(deriv => {\n        const { from, to } = deriv;\n        const diff = from - lastTo;\n\n        if (diff > 1) {\n          const derivTd = document.createElement('td');\n          derivTd.colSpan = diff * 2;\n          derivTr.appendChild(derivTd);\n\n          const hrTd = document.createElement('td');\n          hrTd.colSpan = diff * 2;\n          hrTr.appendChild(hrTd);\n        }\n\n        const derivTd = document.createElement('td');\n        const text = document.createTextNode(deriv.ccgCat);\n        derivTd.appendChild(text);\n\n        const hr = document.createElement('hr');\n        const hrTd = document.createElement('td');\n        hrTd.appendChild(hr);\n\n        const oprTd = document.createElement('td');\n        oprTd.className = 'ccgjs-operation';\n        const opr = document.createTextNode(deriv.opr ?? '');\n        oprTd.appendChild(opr);\n\n        const fakeOpr = document.createElement('td');\n        fakeOpr.className = 'ccgjs-operation';\n\n        if (to - from > 0) {\n          const diffM = (to - from + 1) * 2 - 1;\n          derivTd.colSpan = diffM;\n          hrTd.colSpan = diffM;\n        }\n\n        hrTr.appendChild(hrTd);\n        hrTr.appendChild(oprTd);\n        derivTr.appendChild(derivTd);\n        derivTr.appendChild(fakeOpr);\n\n        lastTo = to;\n      });\n\n      if (lastTo + 1 < numOfWords) {\n        const diff = (numOfWords - (lastTo + 1)) * 2;\n\n        const derivTd = document.createElement('td');\n        derivTd.colSpan = diff;\n        derivTr.appendChild(derivTd);\n\n        const hrTd = document.createElement('td');\n        hrTd.colSpan = diff;\n        hrTr.appendChild(hrTd);\n      }\n\n      this.domBuilder?.appendChild(hrTr);\n      this.domBuilder?.appendChild(derivTr);\n    });\n\n    return this.domBuilder;\n  }\n}\n","import DOM from './ccg.dom';\nimport Reader, * as ReaderTypes from './ccg.reader';\nimport Tree, * as TreeTypes from './ccg.tree';\n\nexport const CCG = {\n  DOM,\n  Reader,\n  ReaderTypes,\n  Tree,\n  TreeTypes,\n};\n\nexport default CCG;\n"],"names":["SyntaxError","message","expected","found","location","name","Error","captureStackTrace","buildMessage","hex","ch","charCodeAt","toString","toUpperCase","literalEscape","s","replace","classEscape","describeExpectation","expectation","type","text","escapedParts","parts","map","part","Array","isArray","inverted","description","describeExpected","expected1","descriptions","i","j","sort","length","slice","join","describeFound","found1","peg$parse","input","options","undefined","peg$FAILED","peg$startRuleFunctions","Start","peg$parseStart","peg$startRuleFunction","peg$c0","peg$c1","peg$literalExpectation","peg$c2","peg$c3","peg$c4","node","left","right","peg$c5","c","peg$c6","peg$c7","peg$c8","peg$c9","c1","c2","peg$c10","peg$c11","peg$c12","peg$c13","peg$c14","peg$c15","peg$c16","peg$c17","ccgCat","head","dtrs","peg$c18","peg$c19","peg$c20","peg$c21","peg$c22","int","peg$c23","peg$c24","peg$c25","peg$c26","peg$c27","modPOSTag","origPOSTag","word","predArgCat","peg$c28","peg$c29","peg$c30","peg$c31","peg$c32","peg$c33","peg$c34","peg$classExpectation","peg$c35","peg$c36","peg$c37","peg$c38","peg$c39","peg$c40","peg$c41","peg$c42","peg$c43","peg$c44","peg$c45","peg$otherExpectation","peg$c46","peg$c47","peg$c48","peg$currPos","peg$savedPos","peg$posDetailsCache","line","column","peg$maxFailPos","peg$maxFailExpected","peg$silentFails","peg$resultsCache","peg$result","startRule","substring","text1","ignoreCase","peg$endExpectation","peg$computePosDetails","pos","details","p","peg$computeLocation","startPos","endPos","startPosDetails","endPosDetails","start","offset","end","peg$fail","push","peg$buildStructuredError","location1","s0","key","cached","nextPos","result","peg$parseTree","s1","s2","s3","s4","s5","s6","s7","s8","s9","s10","peg$parse__","peg$parseNodeT","peg$parseNodeL","peg$parseNode","s11","s12","s13","peg$parse_","peg$parseCCGCat","peg$parseHead","peg$parseDtrs","s14","s15","s16","s17","peg$parsePOSTag","peg$parseWord","peg$parseRightCat","peg$parseLeftCat","peg$parseSingleCat","test","charAt","x","parseInt","parse","DependencyHead","Reader","str","original","read","obj","PEGjs","isSucceed","Tree","metadata","isParsed","sentence","words","ccgCats","height","nodes","constructTree","traverse","fn","root","opts","stringBuilder","toStringUtil","buildDerivations","derivations","buildDerivUtil","reader","buildTree","buildTreeUtil","level","parent","dir","value","mappedIndexedWords","nIndex","isNodeL","nodeL","wIndex","Math","max","pretty","indents","repeat","isNodeT","n","index","derivation","from","to","derivLeft","derivRight","opr","bottom","DOM","tree","create","createTable","table","document","createElement","className","domBuilder","lastTo","hrTr","numOfWords","wordTr","forEach","wordTd","createTextNode","appendChild","oprTd","row","derivTr","deriv","diff","derivTd","colSpan","hrTd","hr","fakeOpr","diffM","CCG","ReaderTypes","TreeTypes"],"mappings":"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"}